apiVersion: v1
kind: ServiceAccount
metadata:
  name: cdi-controller
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cdi-external-provisioner-cfg
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - watch
  - list
  - delete
  - update
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - watch
  - list
  - delete
  - update
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cdi-external-provisioner-runner
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - list
  - watch
  - create
  - update
  - patch
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshots
  verbs:
  - get
  - list
- apiGroups:
  - snapshot.storage.k8s.io
  resources:
  - volumesnapshotcontents
  verbs:
  - get
  - list
- apiGroups:
  - storage.k8s.io
  resources:
  - csinodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cdi-csi-provisioner-role-cfg
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cdi-external-provisioner-cfg
subjects:
- kind: ServiceAccount
  name: cdi-controller
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cdi-csi-provisioner-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cdi-external-provisioner-runner
subjects:
- kind: ServiceAccount
  name: cdi-controller
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: cdi-controller
  namespace: default
spec:
  ports:
  - port: 10000
    targetPort: 10000
  selector:
    app: cdi-controller
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cdi-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cdi-controller
  serviceName: cdi-controller
  template:
    metadata:
      labels:
        app: cdi-controller
        cdi.intel.com/webhook: ignore
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cdi.intel.com/controller
                operator: NotIn
                values:
                - "no"
                - "false"
      containers:
      - command:
        - /usr/local/bin/cdi-driver
        - -v=5
        - -mode=controller
        - -endpoint=unix:///csi/csi-controller.sock
        - -registryEndpoint=tcp://0.0.0.0:10000
        - -nodeid=$(KUBE_NODE_NAME)
        - -caFile=/certs/ca.crt
        - -certFile=/certs/tls.crt
        - -keyFile=/certs/tls.key
        - -drivername=$(CDI_DRIVER_NAME)
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: TERMINATION_LOG_PATH
          value: /tmp/termination-log
        - name: CDI_DRIVER_NAME
          value: cdi.intel.com
        image: cdi-driver:canary
        imagePullPolicy: IfNotPresent
        name: cdi-driver
        securityContext:
          readOnlyRootFilesystem: true
        terminationMessagePath: /tmp/termination-log
        volumeMounts:
        - mountPath: /certs
          name: registry-cert
        - mountPath: /csi
          name: plugin-socket-dir
        - mountPath: /tmp
          name: tmp-dir
      - args:
        - -v=3
        - --csi-address=/csi/csi-controller.sock
        - --feature-gates=Topology=true
        - --strict-topology=true
        - --timeout=5m
        image: csi-provisioner:cdi
        imagePullPolicy: IfNotPresent
        name: external-provisioner
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /csi
          name: plugin-socket-dir
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: cdi-controller
      volumes:
      - emptyDir: null
        name: plugin-socket-dir
      - name: registry-cert
        secret:
          secretName: cdi-registry-secrets
      - emptyDir: {}
        name: tmp-dir
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cdi-node
  namespace: default
spec:
  selector:
    matchLabels:
      app: cdi-node
  template:
    metadata:
      labels:
        app: cdi-node
        cdi.intel.com/webhook: ignore
    spec:
      containers:
      - command:
        - /usr/local/bin/cdi-driver
        - -v=5
        - -mode=node
        - -endpoint=unix:///var/lib/$(CDI_DRIVER_NAME)/csi.sock
        - -nodeid=$(KUBE_NODE_NAME)
        - -controllerEndpoint=tcp://$(KUBE_POD_IP):10001
        - -registryEndpoint=tcp://cdi-controller:10000
        - -caFile=/certs/ca.crt
        - -certFile=/certs/tls.crt
        - -keyFile=/certs/tls.key
        - -statePath=/var/lib/$(CDI_DRIVER_NAME)
        - -drivername=$(CDI_DRIVER_NAME)
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: KUBE_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: CDI_DRIVER_NAME
          value: cdi.intel.com
        - name: TERMINATION_LOG_PATH
          value: /tmp/termination-log
        image: cdi-driver:canary
        imagePullPolicy: IfNotPresent
        name: cdi-driver
        securityContext:
          privileged: true
          runAsUser: 0
        terminationMessagePath: /tmp/termination-log
        volumeMounts:
        - mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi
          mountPropagation: Bidirectional
          name: mountpoint-dir
        - mountPath: /var/lib/kubelet/pods
          mountPropagation: Bidirectional
          name: pods-dir
        - mountPath: /certs
          name: node-cert
        - mountPath: /dev
          name: dev-dir
        - mountPath: /sys
          name: sys-dir
        - mountPath: /var/lib/cdi.intel.com
          mountPropagation: Bidirectional
          name: cdi-state-dir
      - args:
        - -v=3
        - --kubelet-registration-path=/var/lib/$(CDI_DRIVER_NAME)/csi.sock
        - --csi-address=/cdi/csi.sock
        env:
        - name: CDI_DRIVER_NAME
          value: cdi.intel.com
        image: quay.io/k8scsi/csi-node-driver-registrar:v1.2.0
        imagePullPolicy: IfNotPresent
        name: driver-registrar
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /cdi
          name: cdi-state-dir
        - mountPath: /registration
          name: registration-dir
      nodeSelector:
        storage: cdi
      volumes:
      - hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
        name: registration-dir
      - hostPath:
          path: /var/lib/kubelet/plugins/kubernetes.io/csi
          type: DirectoryOrCreate
        name: mountpoint-dir
      - hostPath:
          path: /var/lib/kubelet/pods
          type: DirectoryOrCreate
        name: pods-dir
      - name: node-cert
        secret:
          secretName: cdi-node-secrets
      - hostPath:
          path: /var/lib/cdi.intel.com
          type: DirectoryOrCreate
        name: cdi-state-dir
      - hostPath:
          path: /dev
          type: DirectoryOrCreate
        name: dev-dir
      - hostPath:
          path: /sys
          type: DirectoryOrCreate
        name: sys-dir
---
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: cdi.intel.com
spec:
  attachRequired: false
  podInfoOnMount: true
  volumeLifecycleModes:
  - Persistent
  - Ephemeral
