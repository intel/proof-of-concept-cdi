apiVersion: v1
kind: ServiceAccount
metadata:
  name: cdi-controller
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: cdi-controller
  namespace: default
spec:
  selector:
    app: cdi-controller
  ports:
  - port: 10000
    targetPort: 10000
---
apiVersion: v1
kind: Service
metadata:
  name: cdi-metrics
  namespace: default
spec:
  type: NodePort
  selector:
    app: cdi-controller
  ports:
  - port: 10010
    targetPort: 10010
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cdi-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cdi-controller
  serviceName: cdi-controller
  template:
    metadata:
      labels:
        app: cdi-controller
        cdi.intel.com/webhook: ignore
    spec:
      securityContext:
        runAsNonRoot: true
        # UID 1000 is defined in Dockerfile
        runAsUser: 1000
      serviceAccountName: cdi-controller
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              # By default, the controller will run anywhere in the cluster.
              # If that isn't desired, the "cdi.intel.com/controller" label
              # can be set to "no" or "false" for a node to prevent the controller
              # from running there.
              #
              # This is used during testing as a workaround for a particular issue
              # on Clear Linux where network configuration randomly fails such that
              # the driver which runs on the same node as the controller cannot
              # connect to the controller (https://github.com/intel/pmem-csi/issues/555).
              #
              # It may also be useful for other purposes, in particular for deployment
              # through the operator: it has the same rule and currently no other API for
              # setting affinity.
              - key: cdi.intel.com/controller
                operator: NotIn
                values:
                - "no"
                - "false"
      containers:
      - name: cdi-driver
        image: localhost:5000/cdi-driver:canary
        imagePullPolicy: IfNotPresent
        command: [
                 "/usr/local/bin/cdi-driver",
                 "-v=5",
                 "-mode=controller",
                 "-endpoint=unix:///csi/csi-controller.sock",
                 "-registryEndpoint=tcp://0.0.0.0:10000",
                 "-metricsListen=:10010",
                 "-nodeid=$(KUBE_NODE_NAME)",
                 "-caFile=/certs/ca.crt",
                 "-certFile=/certs/tls.crt",
                 "-keyFile=/certs/tls.key",
                 "-drivername=$(CDI_DRIVER_NAME)",
               ]
        securityContext:
          readOnlyRootFilesystem: true
        # Passing /dev to container may cause container creation error because
        # termination-log is located on /dev/ by default, re-locate to /tmp
        terminationMessagePath: /tmp/termination-log
        volumeMounts:
        - name: registry-cert
          mountPath: /certs
        - name: plugin-socket-dir
          mountPath: /csi
        - name: tmp-dir
          mountPath: /tmp
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: TERMINATION_LOG_PATH
          value: /tmp/termination-log
        - name: CDI_DRIVER_NAME
          value: cdi.intel.com
      - name: external-provisioner
        image: quay.io/k8scsi/csi-provisioner:v1.X.Y
        imagePullPolicy: IfNotPresent
        args: [ "-v=3", "--csi-address=/csi/csi-controller.sock", "--feature-gates=Topology=true", "--strict-topology=true", "--timeout=5m" ]
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: plugin-socket-dir
          mountPath: /csi
      volumes:
      - name: plugin-socket-dir
        emptyDir:
      - name: registry-cert
        secret:
          secretName: cdi-registry-secrets
      - name: tmp-dir
        emptyDir: {}
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: cdi-node
  namespace: default
spec:
  selector:
    matchLabels:
      app: cdi-node
  template:
    metadata:
      labels:
        app: cdi-node
        cdi.intel.com/webhook: ignore
    spec:
      nodeSelector:
        storage: cdi
      containers:
      - name: cdi-driver
        image: localhost:5000/cdi-driver:canary
        imagePullPolicy: IfNotPresent
        command: [
                  "/usr/local/bin/cdi-driver",
                  "-v=5",
                  "-mode=node",
                  "-endpoint=unix:///var/lib/$(CDI_DRIVER_NAME)/csi.sock",
                  "-nodeid=$(KUBE_NODE_NAME)",
                  "-controllerEndpoint=tcp://$(KUBE_POD_IP):10001",
                  "-registryEndpoint=tcp://cdi-controller:10000",
                  "-caFile=/certs/ca.crt",
                  "-certFile=/certs/tls.crt",
                  "-keyFile=/certs/tls.key",
                  "-statePath=/var/lib/$(CDI_DRIVER_NAME)",
                  "-drivername=$(CDI_DRIVER_NAME)",
              ]
        # Passing /dev to container may cause container creation error because
        # termination-log is located on /dev/ by default, re-locate to /tmp
        terminationMessagePath: /tmp/termination-log
        securityContext:
          privileged: true
          runAsUser: 0
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: KUBE_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: CDI_DRIVER_NAME
          value: cdi.intel.com
        - name: TERMINATION_LOG_PATH
          value: /tmp/termination-log
        volumeMounts:
        - name: mountpoint-dir
          mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi
          mountPropagation: Bidirectional
        - name: pods-dir
          mountPath: /var/lib/kubelet/pods
          mountPropagation: Bidirectional
        - name: node-cert
          mountPath: /certs
        - name : dev-dir
          mountPath: /dev
        - name: sys-dir
          mountPath: /sys
        - name: cdi-state-dir
          # This must be the same path as on the host, otherwise
          # Kata Containers cannot find the file that gets attached
          # to a loop device because the name is the same inside
          # and outside the container.
          mountPath: /var/lib/cdi.intel.com
          # Needed for Kata Containers: we mount the CDI volume inside our
          # state dir and want that to be visible also on the host, because
          # the host will need access to the image file that we create inside
          # that mounted fs.
          mountPropagation: Bidirectional
      - name: driver-registrar
        image: quay.io/k8scsi/csi-node-driver-registrar:v1.X.Y
        imagePullPolicy: IfNotPresent
        args: [
            "-v=3",
            "--kubelet-registration-path=/var/lib/$(CDI_DRIVER_NAME)/csi.sock",
            "--csi-address=/cdi/csi.sock" ]
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: cdi-state-dir
          mountPath: /cdi
        # node-driver-registrar uses /registration(hard-coded path) to keep its listening socket
        # The socket path is used by kubelet for plugin registration
        # so, we should make sure the appropriate host path available.
        - name: registration-dir
          mountPath: /registration
        env:
        - name: CDI_DRIVER_NAME
          value: cdi.intel.com
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi
            type: DirectoryOrCreate
        - name: pods-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
        - name: node-cert
          secret:
            secretName: cdi-node-secrets
        - name: cdi-state-dir
          hostPath:
            path: /var/lib/cdi.intel.com
            type: DirectoryOrCreate
        - name: dev-dir
          hostPath:
            path: /dev
            type: DirectoryOrCreate
        - name: sys-dir
          hostPath:
            path: /sys
            type: DirectoryOrCreate

